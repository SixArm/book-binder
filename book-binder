#!/bin/sh
#set -euf

## Program Tracking

program_command="book-binder"
program_version="1.1.0"
program_created="2023-04-23T14:46:43Z"
program_updated="2023-06-21T08:56:23Z"
program_license="GPL-2.0 or GPL-3.0 or contact us for more"
program_website="https://github.com/sixarm/book-binder"
program_contact="Joel Parker Henderson (joel@sixarm.com)"

## Source https://github.com/sixarm/unix-shell-script-kit
. "$(dirname "$(readlink -f "$0")")/unix-shell-script-kit"

## Help Function

help(){
cat << EOF
book-binder

Create a book by binding our project's page markdown files.

Syntax:

    book-binder <input-file> <output-file> <link-file> <link-url-prefix>

Example:

    book-binder "book-start.yml" "book-links.md" "book-build.md" "./pages" "https://example.com/pages"

Steps:

1. Start with the file book-start.yml which is front matter.

2. Parse the file book-links.md file into page-specific markdown files.

2. Append each page-specifi markdown file into the file book-build.md.

3. Fix up internal links to point to repo URLs.

The result is one big markdown file, suitable for pandoc.

## Options

  * -h --help: 
      print helpful information

  * -v --verbose: 
      increase the verbose level

  * -V --version:
      print the program version number

  * --foo=<value>:
      set the foo variable to a value

## Options to print program information

  * --program-command:
      print the program command name

  * --program-version:
      print the program version number

  * --program-created:
      print the program created date stamp

  * --program-updated:
      print the program updated date stamp

  * --program-license:
      print the program license name

  * --program-website:
      print the program website URL

  * --program-contact:
      print the program contact information for the maintainer

## Environment variables (optional)

export BOOK_BINDER_START_FILE="book-start.yml" # front matter configuration
export BOOK_BINDER_LINKS_FILE="book-links.md"  # input contents as markdown links
export BOOK_BINDER_BUILD_FILE="book-build.md"; # output markdown temporary aggregation
export BOOK_BINDER_PAGE_PATH_PREPEND="./pages"; # where to read each local input page path
export BOOK_BINDER_PAGE_LINK_PREPEND=""/pages"; # where to direct each remote page link

## Tracking

  * Command: $program_command
  * Version: $program_version
  * Created: $program_created
  * Updated: $program_updated
  * License: $program_license
  * Website: $program_website
  * Contact: $program_contact
EOF
}

verbose=0
while :; do
    case $1 in
        --)
            shift
            break
            ;;
        -h|--help)
            help; exit 0;
            ;;
        -v|--verbose)
            verbose=$((verbose + 1))
            ;;
        -V|--version)
            out "$program_version"; exit 0;
            ;;
        # Options that print program information variables.
        # These variables are all set at the top of the script.
        --program-command)
            out "$program_command"; exit 0;
            ;;
        --program-version)
            out "$program_version"; exit 0;
            ;;
        --program-created)
            out "$program_created"; exit 0;
            ;;
        --program-updated)
            out "$program_updated"; exit 0;
            ;;
        --program-license)
            out "$program_license"; exit 0;
            ;;
        --program-website)
            out "$program_website"; exit 0;
            ;;
        --program-contact)
            out "$program_contact"; exit 0;
            ;;
        # Catch-all that enables arbitrary options such as key=val.
        # Depending on your goals, you can use this section or not.
        --*=*)
            key="${1#--}"; key="${key%%=*}";
            val="${1#*=}";
            eval "$key"=\$val
            shift
            ;;
        # Catch-all for unexpected input that looks like an option.
        # Depending on your goals, you can use this section or not.
        -?*)
            die "The command line option is unknown: " "$1"
            ;;
        # Any other arguments are to be treated as content, or as positional
        # arguments that are parsed later, thus break out of this loop.
        *)
            break
            ;;
    esac
    shift
done            

start_file=${1:-${BOOK_BINDER_START_FILE:-book-start.yml}}; # file of front matter configuration
links_file=${2:-${BOOK_BINDER_LINKS_FILE:-book-links.md}};  # input file to scan page markdown links
build_file=${3:-${BOOK_BINDER_BUILD_FILE:-book-build.md}};  # output file to write temporary markdown aggregation
page_path_preprend=${4:-${BOOK_BINDER_PAGE_PATH_PREPEND:-{./pages}}; # where to read each local input page path
page_link_preprend=${5:-${BOOK_BINDER_PAGE_LINK_PREPEND:-{/pages}};  # where to direct each remote page link

if [ "$verbose" -gt "0" ]; then
cat << EOF
start_file: $start_file
links_file: $links_file
build_file: $build_file
page_path_prepend: $page_path_preprend
page_link_prepend: $page_link_preprend
EOF
fi

# Read one markdown page file.
# This is essentially a map-fold function.
fold_page(){
    {
        printf \\n;
        cat "$1/index.md"
        printf \\n;
    }
}

# Convert Markdown headlines so they work with PDF TOC.
#
#   * ## to ### (so the TOC doesn't use it)
#   * # to ## (so the TOC shows a typical dot dot dot line)
#   * # **Headline** to # (so the TOC shows a section entry)
#
convert_book_output_markdown_headlines_to_work_with_pdf_toc(){
    sed -i.bak 's/^## /### /; s/^# /## /; s/^## \*\*\(.*\)\*\*$/# \1/' "$build_file" && rm "$build_file.bak"
}

# Convert project links from relative to absolute.
#
# Example input:
#
#     [Foo](/foo)
#
# Example output:
#
#     [Foo](https://example.com/foo)
#
convert_book_output_project_links_from_relative_to_absolute(){
    sed -i.bak "s#](/#(${page_link_preprend}/#g" "$build_file" && rm "$build_file.bak"
}

main(){
    cp "$start_file" "$build_file"
    cat "$links_file" | while read -r line; do
        case "$line" in
            \#\#\#\ \[*\]\(*\))
                topic=${line##*(}
                topic=${topic%%)}
                fold_page "$page_path_preprend/$topic" >> "$build_file"
            ;;
            \*\ \[*\]\(*\))
                topic=${line##*(}
                topic=${topic%%)}
                fold_page "$page_path_preprend/$topic" | sed 's/^\(##*\) /#\1 /' >> "$build_file"
            ;;
        esac
    done
    #convert_book_output_markdown_headlines_to_work_with_pdf_toc
    #convert_book_output_project_links_from_relative_to_absolute
}

main
